include "vec.hay" 
include "str.hay"
include "std.hay"

struct Map<T> {
    
    Vec<Str>: keys
    Vec<T>: values

impl:
    inline fn Map.new<T>() -> [Map<T>] {
        Vec.new::<Str>
        Vec.new::<T>
        cast(Map)
    }

    inline fn Map.contains<T>(Str &Map<T>) -> [bool] {
        Map.get as [opt]
        &opt Opt.is_some 
    }

    fn Map.insert<T>(Str: key T: value *Map<T>: self) -> [Opt<T>] {

        key self Map.get_mut as [maybe_val]
        &maybe_val Opt.is_some if {
            maybe_val Opt.unwrap as [val]
            val @ Opt.Some
            value val !
        } else {

            key   self::keys   Vec.push
            value self::values Vec.push
            Opt.None::<T>
        }
    }

    fn Map.get_mut<T>(Str: key *Map<T>: self) -> [Opt<*T>] {
        0 while dup self::keys Vec.len < {
            as [i]

            key i self::keys Vec.at Opt.unwrap Str.equals if {
                i self::values Vec.get_mut return 
            }

            i 1 + 
        } drop

        Opt.None::<*T>
    }

    fn Map.get<T>(Str: key &Map<T>: self) -> [Opt<&T>] {
        0 while dup self::keys Vec.len < {
            as [i]
            key i self::keys Vec.at Opt.unwrap Str.equals if {
                i self::values Vec.get return 
            }

            i 1 + 
        } drop

        Opt.None::<&T>
    }

}