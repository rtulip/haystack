include "selfhost/ir/types/type.hay"
include "stack.hay"
include "linear_map.hay"

var Str[1024]: type_names_p
var Stack<Str>: type_names_stack_p
var Type[1024]: types_p
var Stack<Type>: types_stack_p
var Map<Type>: type_map_p

var *Type[4096]: type_members_p
var Stack<*Type>: members_stack_p

var Str[4096]: idents_p
var Stack<Str>: idents_stack_p

var *Type[1024]: generics_p
var Stack<*Type>: generics_stack_p

var Str[256]: names_in_progress_p
var Stack<Str>: names_in_progress_stack_p
var u64[256]: member_count_p
var Stack<u64>: member_count_stack_p
var u64[256]: generics_count_p
var Stack<u64>: generics_count_stack_p
var *Type[512]: members_in_progress_p
var Stack<*Type>: members_in_progress_stack_p
var Str[512]: idents_in_progress_p
var Stack<Str>: idents_in_progress_stack_p
var *Type[512]: generics_in_progress_p
var Stack<*Type>: generics_in_progress_stack_p

struct TypeList {
    *Map<Type>: type_map
    *Stack<*Type>: type_members
    *Stack<Str>: idents
    *Stack<*Type>: generics
}

var TypeList: type_list

fn TypeBuilder.start(Str: name TypeKind: kind) {

    // Add the new type to the type map
    type_list @ as [types]
    name kind Type.new_empty types::type_map Map.insert as [maybe_type]
    
    // Check to make sure that the name isn't taken
    maybe_type Opt.is_some if {
        "Redefinition of Type `" puts
        name puts
        "`." putlns
        1 exit 
    }

    name names_in_progress_stack_p Stack.push Opt.is_some if {
        "names in progrees stack full..." putlns
        1 exit 
    }

    0 member_count_stack_p   Stack.push drop
    0 generics_count_stack_p Stack.push drop
}

fn TypeBuilder.current.type_kind() -> [TypeKind] {
    names_in_progress_stack_p Stack.peek as [maybe_type_name]
    maybe_type_name Opt.is_some if {
        maybe_type_name Opt.unwrap as [name]
        type_list @ as [types]
        name types::type_map Map.get Opt.unwrap as [type]
        type::tag
    } else {
        "Failed to get kind: No type is currently being built" putlns
        1 exit
        TypeKind::U64
    }
}

fn TypeBuilder.finish() -> [Str] {
    var Str[64]: tmp_name_buffer_p
    var Stack<Str>: tmp_name_stack
    var *Type[64]: tmp_member_buffer_p
    var Stack<*Type>: tmp_member_stack

    names_in_progress_stack_p Stack.pop as [maybe_type_name] 

    maybe_type_name Opt.is_some if {
    
        maybe_type_name Opt.unwrap as [name]
        type_list @ as [types]
        name types::type_map Map.get_ref Opt.unwrap as [type_p]

        type_p @ as [type]
        type::tag TypeKind::U64 ==
        type::tag TypeKind::U8 ==      lor
        type::tag TypeKind::Pointer == lor if {
            
        } else type::tag TypeKind::Placeholder == if {
            
            name cast(TypeValue<Type>) type::tag cast(Type) type_p !

        } else type::tag TypeKind::Struct == if {

            // prepare the temporary buffers
            "" tmp_name_buffer_p @ memset
            tmp_name_buffer_p @ tmp_name_stack Stack.init
            0 cast(*Type) tmp_member_buffer_p @ memset
            tmp_member_buffer_p @ tmp_member_stack Stack.init
            
            // Get the start of each the stack and member stack
            types::idents @ types::type_members @ as [ident_stack member_stack]
            ident_stack::size ident_stack::arr Arr.get_ref
            member_stack::size member_stack::arr Arr.get_ref
            as [ident_start member_start]

            // Determine how many members the structure has.
            member_count_stack_p Stack.pop Opt.unwrap as [n_members]
            n_members 0 == if {
                "Structures must have at least one member. None were found." putlns
                1 exit
            }

            // Move the members and idents to the temporary stack. This is done so that
            // the order is preserved properly when adding it to the global type map.
            n_members while dup 0 > {
                members_in_progress_stack_p Stack.pop Opt.unwrap
                tmp_member_stack Stack.push drop
                idents_in_progress_stack_p Stack.pop Opt.unwrap
                tmp_name_stack Stack.push drop
                1 -
            } drop

            // Move the members and idents from the temporary stack to the global type map
            n_members while dup 0 > {
                tmp_member_stack Stack.pop Opt.unwrap types::type_members Stack.push drop
                tmp_name_stack Stack.pop Opt.unwrap types::idents Stack.push drop
                1 -                  
            } drop 

            // Create a struct
            name
            n_members member_start cast(Arr)
            n_members ident_start  cast(Arr)
            Type.struct
            
            name swap types::type_map Map.insert drop
        } else type::tag TypeKind::GenericStructBase == if {
            
            // prepare the temporary buffers
            "" tmp_name_buffer_p @ memset
            tmp_name_buffer_p @ tmp_name_stack Stack.init
            0 cast(*Type) tmp_member_buffer_p @ memset
            tmp_member_buffer_p @ tmp_member_stack Stack.init
            

            // Get the start of each the stack and member stack
            types::idents @ types::type_members @ types::generics @ as [ident_stack member_stack generics_stack]
            ident_stack::size ident_stack::arr Arr.get_ref
            member_stack::size member_stack::arr Arr.get_ref
            generics_stack::size generics_stack::arr Arr.get_ref
            as [ident_start member_start generics_start]

            // Determine how many members the structure has.
            member_count_stack_p Stack.pop Opt.unwrap as [n_members]
            n_members 0 == if {
                "Structures must have at least one member. None were found." putlns
                1 exit
            }

            // Move the members and idents to the temporary stack. This is done so that
            // the order is preserved properly when adding it to the global type map.
            n_members while dup 0 > {
                members_in_progress_stack_p Stack.pop Opt.unwrap
                tmp_member_stack Stack.push drop
                idents_in_progress_stack_p Stack.pop Opt.unwrap
                tmp_name_stack Stack.push drop
                1 -
            } drop

            // Move the members and idents from the temporary stack to the global type map
            n_members while dup 0 > {
                tmp_member_stack Stack.pop Opt.unwrap types::type_members Stack.push drop
                tmp_name_stack Stack.pop Opt.unwrap types::idents Stack.push drop
                1 -                  
            } drop 

            // Create a struct
            name
            n_members member_start cast(Arr)
            n_members ident_start  cast(Arr)
            cast(StructType)
            
            generics_count_stack_p Stack.pop Opt.unwrap as [n_generics]
            n_generics 0 == if {
                "Generic Structures must have at least one generic" putlns
                1 exit
            }

            n_generics while dup 0 > {
                generics_in_progress_stack_p Stack.pop Opt.unwrap
                tmp_member_stack Stack.push drop
                1 - 
            } drop

            n_generics while dup 0 > {
                tmp_member_stack Stack.pop Opt.unwrap types::generics Stack.push drop
                1 -
            } drop


            n_generics generics_start cast(Arr)
            Type.generic_struct_base

            name swap types::type_map Map.insert drop
        } else {
            "todo: " puts type::tag TypeKind.puts "\n" puts
            1 exit
        }

        name
    } else {
        "Cannot finish building a type since none have been started" putlns
        1 exit
        ""
    }

}

fn TypeBuilder.add_generic(Str: type_name) {

    type_list @ as [types]
    type_name types::type_map Map.get_ref Opt.unwrap as [type]
    TypeBuilder.current.type_kind as [kind]
    kind TypeKind::GenericStructBase ==
    kind TypeKind::GenericUnionInstance == lor
    lnot if {
        "Cannot add a generic to a non-generic type " putlns
        1 exit
    }

    type generics_in_progress_stack_p Stack.push drop
    generics_count_stack_p Stack.pop Opt.unwrap 1 + generics_count_stack_p Stack.push drop

}

fn TypeBuilder.add_member(Str: ident Str: type_name) {

    type_list @ as [types]
    type_name types::type_map Map.get_ref Opt.unwrap as [type]
    TypeBuilder.current.type_kind as [kind]
    kind TypeKind::Struct ==
    kind TypeKind::GenericStructBase == lor
    kind TypeKind::GenericStructInstance == lor
    kind TypeKind::ResolvedStruct == lor
    kind TypeKind::Union == lor
    kind TypeKind::GenericUnionBase == lor
    kind TypeKind::GenericUnionInstance == lor
    kind TypeKind::ResolvedUnion == lor
    lnot if {
        "Cannot add a member to a type which doesn't expect a member" putlns
        1 exit
    }

    type members_in_progress_stack_p Stack.push drop
    ident idents_in_progress_stack_p Stack.push drop

    member_count_stack_p Stack.pop Opt.unwrap 1 + member_count_stack_p Stack.push drop
}

fn TypeBuilder.set.pointer.inner(Str: inner_name) {
    
    type_list @ as [types]
    inner_name types::type_map Map.get_ref Opt.unwrap as [inner] 

    names_in_progress_stack_p Stack.peek as [maybe_type_name]

    maybe_type_name Opt.is_some if {
        maybe_type_name Opt.unwrap as [name]
        name types::type_map Map.get_ref Opt.unwrap as [type_p]

        type_p @ as [type]
        type::tag TypeKind::Pointer == lnot if {
            "Type being built isn't a pointer!" putlns
            1 exit
        }

        inner cast(PointerType) cast(TypeValue<Type>) type::tag cast(Type) type_p !
        

    } else {
        "Cannot set the inner type of a pointer when no type is being built." putlns 
        1 exit 
    }

}


fn type_list.init() {
    
    "Type List Init" putlns

    type_names_p @ type_names_stack_p Stack.init
    types_p @ types_stack_p Stack.init
    type_names_stack_p types_stack_p type_map_p Map.init

    type_members_p @ members_stack_p Stack.init
    idents_p @ idents_stack_p Stack.init
    generics_p @ generics_stack_p Stack.init

    type_map_p members_stack_p idents_stack_p generics_stack_p
    cast(TypeList) type_list !

    names_in_progress_p @ names_in_progress_stack_p Stack.init
    members_in_progress_p @ members_in_progress_stack_p Stack.init
    member_count_p @ member_count_stack_p Stack.init
    idents_in_progress_p @ idents_in_progress_stack_p Stack.init
    generics_in_progress_p @ generics_in_progress_stack_p Stack.init
    generics_count_p @ generics_count_stack_p Stack.init

    "u64"  Type.u64  type_map_p Map.insert drop
    "u8"   Type.u8   type_map_p Map.insert drop 
    "bool" Type.bool type_map_p Map.insert drop 
    "*u64" TypeKind::Pointer TypeBuilder.start
        "u64" TypeBuilder.set.pointer.inner 
        TypeBuilder.finish drop
    "*u8" TypeKind::Pointer TypeBuilder.start 
        "u8" TypeBuilder.set.pointer.inner 
        TypeBuilder.finish drop
    "Str" TypeKind::Struct TypeBuilder.start
        "size" "u64" TypeBuilder.add_member
        "data" "*u8" TypeBuilder.add_member
        TypeBuilder.finish drop
    "T" TypeKind::Placeholder TypeBuilder.start
        TypeBuilder.finish drop
    "*T" TypeKind::Pointer TypeBuilder.start
        "T" TypeBuilder.set.pointer.inner
        TypeBuilder.finish drop
    "Arr" TypeKind::GenericStructBase TypeBuilder.start
        "T" TypeBuilder.add_generic
        "size" "u64" TypeBuilder.add_member
        "data" "*T"  TypeBuilder.add_member
        TypeBuilder.finish drop
}


fn main() {

    type_list.init

    "u64"  type_map_p Map.get Opt.unwrap as [u64_t] {
        "u64_t tag: " puts u64_t::tag TypeKind.puts "\n" puts
    }
    "u8"   type_map_p Map.get Opt.unwrap as [u8_t] {
        "u8_t tag: " puts u8_t::tag TypeKind.puts "\n" puts
    } 
    "bool" type_map_p Map.get Opt.unwrap as [bool_t] {
        "bool_t tag: " puts bool_t::tag TypeKind.puts "\n" puts
    } 
    "*u64" type_map_p Map.get Opt.unwrap as [Ptr-u64] {
        "*u64_t tag: " puts Ptr-u64::tag TypeKind.puts "\n" puts
        "  *u64_t inner: " puts Ptr-u64::type::Pointer::inner @ as [inner] {
            inner::tag TypeKind.puts "\n" puts
        }
    }
    "*u8"  type_map_p Map.get Opt.unwrap as [Ptr-u8] {
        "*u8_t tag: " puts Ptr-u8::tag TypeKind.puts "\n" puts
        "  *u8_t inner: " puts Ptr-u8::type::Pointer::inner @ as [inner] {
            inner::tag TypeKind.puts "\n" puts
        }
    }
    "Str"  type_map_p Map.get Opt.unwrap  as [str_t] {
        "str_t tag: " puts str_t::tag TypeKind.puts "\n" puts
        "  members: " putlns 
            str_t::type::Struct::members
            str_t::type::Struct::idents as [members idents]
        
        0 while dup members::size < {
            as [i]
            "    * " puts i idents Arr.get puts ": " puts 
            i members Arr.get @ as [t]
            t Type.puts "\n" puts
            i 1 + 
        } drop
    } 
    "T" type_map_p Map.get Opt.unwrap as [gen_t] {
        "T: " puts gen_t Type.puts "\n" puts
    }
    "Arr"  type_map_p Map.get Opt.unwrap as [arr_t] {
        arr_t Type.puts ":" putlns
        arr_t::type::GenericStructBase::base::members
        arr_t::type::GenericStructBase::base::idents as [members idents]
        0 while dup members::size < {
            as [i]
            " * " puts i idents Arr.get puts ": " puts 
            i members Arr.get @ Type.puts "\n" puts
            i 1 +
        } drop

    }

}