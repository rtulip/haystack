include "std.hay"
include "hstring.hay"
struct Token:

enum OperatorTag {
    Plus
    Minus
    Star
    Slash
    LessThan
    LessEqual
    GreaterThan
    GreaterEqual
    Equal
    BangEqual
    Modulo
    Read
    Write
    Ampersand
    Unary
}

union OperatorKind {
    u64: other
    &Token: unary
}

struct Operator {
    OperatorKind: kind
    OperatorTag: tag
impl:
    fn Operator.Plus() -> [Operator] {
        0 cast(OperatorKind)
        OperatorTag::Plus
        cast(Operator)
    }

    fn Operator.fput(Operator: self u64: fd) {
        '`' fd fputc
        self::tag OperatorTag::Plus == if {
            '+' fd fputc
        } else self::tag OperatorTag::Minus == if {
            '-' fd fputc
        } else self::tag OperatorTag::Star == if {
            '*' fd fputc
        } else self::tag OperatorTag::Slash == if {
            '/' fd fputc
        } else self::tag OperatorTag::LessThan == if {
            '<' fd fputc
        } else self::tag OperatorTag::LessEqual == if {
            "<=" fd fputs
        } else self::tag OperatorTag::GreaterThan == if {
            '>' fd fputc
        } else self::tag OperatorTag::GreaterEqual == if {
            ">=" fd fputs
        } else self::tag OperatorTag::Equal == if {
            "==" fd fputs
        } else self::tag OperatorTag::BangEqual == if {
            "!=" fd fputs
        } else self::tag OperatorTag::Modulo == if {
            '%' fd fputc
        } else self::tag OperatorTag::Read == if {
            '@' fd fputc
        } else self::tag OperatorTag::Write == if {
            '!' fd fputc
        } else self::tag OperatorTag::Ampersand == if {
            '&' fd fputc
        } else self::tag OperatorTag::Unary == if {
            "Unary(" fd fputs 
            self::kind::unary @ as [token]
            &token::lexeme HString.as_str fd fputs
            ")" fd fputs
        } else {
            "\nOperator.fput unreachable!" putlns
            1 exit 
        }
        '`' fd fputc
    }
    
    inline fn Operator.put(Operator) {
        1 Operator.fput
    }
}

