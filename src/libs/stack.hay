include "std.hay"
struct Stack<T> {
    u64: size
    Arr<T>: arr
}

fn Stack.push<T>(T: value Stack<T>: stk) -> [Stack<T>] {
    stk::size >= stk::arr::size if {
        "Stack is full. Cannot push new item" putlns
        1 exit
    }
    value stk::size stk::arr Arr.set
    stk::size 1 + stk::arr cast(Stack)
}

fn Stack.pop<T>(Stack<T>: stk) -> [Stack<T> T] {
    stk::size 0 == if {
        "Stack is empty. Cannot pop item." putlns
        1 exit
    }
    stk::size 1 - stk::arr Arr.get as [value]
    stk::size 1 - stk::arr cast(Arr) value 
}

fn Stack.peek<T>(Stack<T>: stk) -> [T] {
    stk::size 0 == if {
        "Stack is empty. Nothing to peek at." putlns
        1 exit
    }
    stk::size 1 - stk::arr Arr.get 
}