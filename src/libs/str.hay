include "sys_x86_64.hay"
struct cStr {
    pub u64: size
    pub *u8: data
}

fn cStr.to_Str(cStr: cs) -> [Str] {
    cs::size 1 - cs::data cast(Str)
}

fn Str.to_cStr(Str: s Arr<u8>: buffer) -> [cStr bool] {
    s::size 1 + buffer::size >= if {
        "Buffer is too small to null terminate string" putlns
        s as [str] {
            str::size str::data 
        } cast(cStr) false
    } else {
        // null terminate the string.
        s as [str] {
            str::size str::data 
        } buffer::data memcpy
        0u8 buffer::data s::size ptr+ !
        s::size 1 + buffer::data cast(cStr) true
    }
}

fn Str.concat(Str: s1 Str: s2 Arr<u8>: buffer) -> [Str] {
    s1::size s2::size + buffer::size > if {
        "Buffer is to small to concatinate strings" putlns
        1 exit
    }
    s1 as [str] { str::size str::data } buffer::data memcpy
    s2 as [str] { str::size str::data } buffer::data s1::size ptr+ memcpy
    s1::size s2::size + buffer::data cast(Str)

}

fn fputs(Str: s u64: fd) {
    s as [str] { str::size str::data } fd sys_write drop
}

// TODO: replace `1` with a constant for stdout
fn puts(Str) {
    1 fputs
}

fn putlns(Str) {
    puts "\n" puts
}

fn exit(u64) {
    sys_exit 
}

fn fputu(u64: u u64: fd) {
    var u8[20]: buffer
    u buffer @ u64.to_str fd fputs
}

fn putu(u64) {
    1 fputu
}

fn putlnu(u64) {
    putu "\n" puts
}

fn fputb(bool: b u64: fd) {
    b if { "true" fd fputs } else { "false" fd fputs }
}

fn putb(bool) {1 fputb}

fn putlnb(bool) {
    putb "\n" puts
}

fn Str.drop_left(Str: s) -> [Str] {
    s::size 0 == if {
        s
    } else {
        s::size 1 - s::data 1 ptr+ cast(Str)
    }
}

fn Str.drop_right(u64: n Str: s) -> [Str] {
    s::size n >= if {
        s::size n - s::data n ptr+ cast(Str)
    } else {
        0 s::data s::size ptr+ cast(Str)
    }
}

fn Str.size(Str: s) -> [u64] {
    s::size
}

fn Str.substr(u64: start u64: len Str: s) -> [Str] {
    len s::data start ptr+ cast(Str)
}

fn Str.split_left(u64: n Str: s) -> [Str Str] {
    n s::data cast(Str)
    s::size n - s::data n ptr+ cast(Str)
}

fn u64.to_str(u64: u Arr<u8>: chars) -> [Str] {

    chars::size 20 < if {
        "Must provide at least 20 chars of buffer to copy u64" putlns
        1 exit 
    }

    0 u == if {
        "0" as [str] { str::size str::data } chars::data memcpy
        1 chars::data cast(Str) 
    } else {
        19 u while dup 0 != {
            as [i x]
            x 10 % 48 + cast(u8) chars::data i ptr+ !
            
            i 1 -
            x 10 /
        } drop
        
        as [i]
        19 i - chars::data i 1 + ptr+ cast(Str)
    }    

}