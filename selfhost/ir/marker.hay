include "std.hay"
enum Marker {
    OpenBrace
    CloseBrace
    OpenBracket
    CloseBracket
    OpenParen
    CloseParen
    Colon
    DoubleColon
    Arrow    
}

fn Marker.fputs(Marker: marker u64: fd) {

    "Marker::" fd fputs
    marker Marker::OpenBrace == if {
        "OpenBrace" fd fputs
    } else marker Marker::CloseBrace == if {
        "CloseBrace" fd fputs
    } else marker Marker::OpenBracket == if {
        "OpenBracket" fd fputs
    } else marker Marker::CloseBracket == if {
        "CloseBracket" fd fputs
    } else marker Marker::OpenParen == if {
        "OpenParen" fd fputs
    } else marker Marker::CloseParen == if {
        "CloseParen" fd fputs
    } else marker Marker::Colon == if {
        "Colon" fd fputs
    } else marker Marker::DoubleColon == if {
        "DoubleColon" fd fputs
    } else marker Marker::Arrow == if {
        "Arrow" fd fputs
    } else {
        "Unhandled Marker" putlns
        1 exit
    }

}

fn Marker.puts(Marker) {
    1 Marker.fputs
}

fn Marker.try_from_str(Str: s) -> [Opt<Marker>] {
    "{" s Str.starts_with if {
        Marker::OpenBrace Opt.Some
    } else "}" s Str.starts_with if {
        Marker::CloseBrace Opt.Some
    } else "[" s Str.starts_with if {
        Marker::OpenBracket Opt.Some
    } else "]" s Str.starts_with if {
        Marker::CloseBracket Opt.Some
    } else "(" s Str.starts_with if {
        Marker::OpenParen Opt.Some
    } else ")" s Str.starts_with if {
        Marker::CloseParen Opt.Some
    } else "::" s Str.starts_with if {
        Marker::DoubleColon Opt.Some
    } else ":" s Str.starts_with if {
        Marker::Colon Opt.Some 
    }  else "->" s Str.starts_with if {
        Marker::Arrow Opt.Some
    } else {
        Opt.None::<Marker>
    }
}

fn Marker.to_str(Marker: m) -> [Str] {
    
    m Marker::OpenBrace == if {
        "{"
    } else m Marker::CloseBrace == if {
        "}"
    } else m Marker::OpenBracket == if {
        "["
    } else m Marker::CloseBracket == if {
        "]"
    } else m Marker::OpenParen == if {
        "("
    } else m Marker::CloseParen == if {
        ")"
    } else m Marker::Colon == if {
        ":"
    } else m Marker::DoubleColon == if {
        "::"
    } else m Marker::Arrow == if {
        "->"
    } else {
        " "
        "Unhandled Marker in Marker.to_str" putlns
        1 exit
    }

}