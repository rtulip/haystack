include "hstring.hay"
include "range.hay"
include "result.hay"
include "selfhost/src/error.hay"
include "selfhost/src/lex/loc.hay"
include "selfhost/src/lex/token_kind.hay"

struct Token {
    pub TokenKind: kind
    pub HString: lexeme
    pub Loc: loc

impl:
    fn Token.new(
        TokenKind: kind
        HString: lexeme
        HString: file
        u64: line
        u64: start
        u64: end
    ) -> [Token] {
        
        kind
        lexeme
        file
        line
        start
        end
        cast(Range)
        cast(Loc)
        cast(Token)
    }

    fn Token.format(HString: s &Token: self) -> [HString] {
        s '[' HString.push
        self::loc Loc.format
        "]: " HString.push_str 
        self::kind TokenKind.format
    }

    fn Token.put(&Token: self) {
        "" HString.new
        self Token.format as [s]
        &s HString.as_str puts
        &s HString.delete
    }

    inline fn Token.putln(&Token) {
        Token.put
        "\n" puts
    } 

}