include "alloc.hay"
include "hstring.hay"
include "result.hay"
include "utils.hay"
include "vec.hay"
include "selfhost/src/error.hay"
include "selfhost/src/lex/keyword.hay"
include "selfhost/src/lex/literal.hay"
include "selfhost/src/lex/loc.hay"
include "selfhost/src/lex/marker.hay"
include "selfhost/src/lex/operator.hay"
include "selfhost/src/lex/token.hay"
include "selfhost/src/lex/token_kind.hay"

struct Scanner {
    HString: file
    HString: source 
    Vec<Token>: tokens
    u64: start
    u64: current
    u64: line
    u64: token_start
    u64: token_end
impl:

    fn Scanner.debug(&Scanner: self) {

        "file:        " puts self::file   HString.debug "" putlns
        "source:      " puts self::source HString.debug "" putlns
        "tokens:      " puts self::tokens Vec.debug     "" putlns
        "start:       " puts self::start       @ putlnu
        "current:     " puts self::current     @ putlnu
        "line:        " puts self::line        @ putlnu
        "token_start: " puts self::token_start @ putlnu
        "token_end :  " puts self::token_end   @ putlnu
        "" putlns

    }

    inline fn Scanner.new(HString: file HString: source) -> [Scanner] {
        file
        source
        Vec.new::<Token>
        0
        0
        1
        1
        1
        cast(Scanner)
    }

    fn Scanner.scan_tokens(Scanner: mut self) -> [Result<Vec<Token> HayError>] {

        while &self Scanner.is_at_end lnot {
            self::current *self::start !
            self::token_end *self::token_start !
            *self Scanner.scan_token as [result]
            &result Opt.is_some if {
                result Opt.unwrap Result.Err::<Vec<Token> HayError> return
            }   
        }

        TokenKind.EoF 
        "" HString.new
        &self::file HString.clone
        self::line
        self::token_start
        self::token_end
        Token.new
        *self::tokens Vec.push
        self::tokens Result.Ok::<Vec<Token> HayError>

    }

    fn Scanner.scan_token(*Scanner: self) -> [Opt<HayError>] {
        self Scanner.advance as [c]
        '(' c == if {
            Marker::LeftParen TokenKind.Marker self Scanner.add_token
        } else ')' c == if {
            Marker::RightParen TokenKind.Marker self Scanner.add_token
        } else '{' c == if {
            Marker::LeftBrace TokenKind.Marker self Scanner.add_token
        } else '}' c == if {
            Marker::RightBrace TokenKind.Marker self Scanner.add_token
        } else '[' c == if {
            Marker::LeftBracket TokenKind.Marker self Scanner.add_token
        } else ']' c == if {
            Marker::RightBracket TokenKind.Marker self Scanner.add_token
        } else ':' c == if {
            ':' self Scanner.matches if {
                Marker::DoubleColon TokenKind.Marker self Scanner.add_token
            } else {
                Marker::Colon TokenKind.Marker self Scanner.add_token
            }
        } else '+' c == if {
            0 self Scanner.peek char.is_alphabetic if {
                self Scanner.identifier as [result] 
                &result Opt.is_some if {
                    result return
                } 
            } else {
                Operator.Plus TokenKind.Operator self Scanner.add_token
            }
        } else '-' c == if {
            0 self Scanner.peek char.is_alphabetic if {
                self Scanner.identifier as [result] 
                &result Opt.is_some if {
                    result return
                } 
            } else '>' self Scanner.matches if {
                Marker::Arrow TokenKind.Marker self Scanner.add_token
            } else {
                Operator.Minus TokenKind.Operator self Scanner.add_token
            }
        } else '*' c == if {
            0 self Scanner.peek as [peek]

            self::file HString.clone
            self::line @
            self::token_start @
            self::token_end @
            cast(Range) cast(Loc) as [l]
            &l Loc.put
            ": Maybe unary *: " puts peek putlnc
            
            peek char.is_alphabetic peek '*' == lor peek '&' == lor if {
                Operator.Star TokenKind.Operator
                self::start @
                self::current @ self::start @ -
                self::source HString.as_str Str.substr HString.new
                self::file HString.clone
                self::line @
                self::token_start @
                self::token_end @
                Token.new
                malloc_obj::<Token> as [tok] tok !
                tok Operator.Unary TokenKind.Operator self Scanner.add_token

            } else {
                Operator.Star TokenKind.Operator self Scanner.add_token
            }
        } else '/' c == if {
            '/' self Scanner.matches if {
                while 0 self Scanner.peek '\n' != 
                    self Scanner.is_at_end lnot land
                {
                    self Scanner.advance drop
                }
            } else {
                Operator.Slash TokenKind.Operator self Scanner.add_token
            }
        } else '<' c == if {
            '=' self Scanner.matches if {
                Operator.LessEqual TokenKind.Operator self Scanner.add_token
            } else {
                Operator.LessThan TokenKind.Operator self Scanner.add_token
            }
        } else '>' c == if {
            '=' self Scanner.matches if {
                Operator.GreaterEqual TokenKind.Operator self Scanner.add_token
            } else {
                Operator.GreaterThan TokenKind.Operator self Scanner.add_token
            }
        } else '%' c == if {
            Operator.Modulo TokenKind.Operator self Scanner.add_token
        } else '=' c == if {
            '=' self Scanner.matches if {
                Operator.LessEqual TokenKind.Operator self Scanner.add_token
            } else {
                
                "Unrecognized token: `=" HString.new
                0 self Scanner.peek HString.push
                '`' HString.push
                self::file HString.clone
                self::line @
                self::token_start @
                self::token_end @
                Loc.new HayError.new Opt.Some return 

            }
        } else '!' c == if {
            '=' self Scanner.matches if {
                Operator.BangEqual TokenKind.Operator self Scanner.add_token
            } else {
                Operator.Write TokenKind.Operator self Scanner.add_token
            }
        } else '@' c == if {
            Operator.Read TokenKind.Operator self Scanner.add_token
        } else '&' c == if {
            0 self Scanner.peek as [c]
            c char.is_alphabetic c '*' == lor c '&' == lor if {

                Operator.Ampersand TokenKind.Operator
                self::start @
                self::current @ self::start @ -
                self::source HString.as_str Str.substr HString.new
                self::file HString.clone
                self::line @
                self::token_start @
                self::token_end @
                Token.new
                malloc_obj::<Token> as [tok] tok !
                tok Operator.Unary TokenKind.Operator self Scanner.add_token

            } else {
                Operator.Ampersand TokenKind.Operator self Scanner.add_token
            }
        } else c ' ' == c '\t' == lor c '\r' == lor if {
            // Do nothing
        } else c '\n' == if {
            self Scanner.newline
        } else c '"' == if {
            self Scanner.string as [err] 
            &err Opt.is_some if {
                err return
            }
        } else c '\'' == if {
            self Scanner.char as [err]
            &err Opt.is_some if {
                err return
            }
        } else {
            
            c char.is_ascii_digit if {
                self Scanner.number as [err]
                &err Opt.is_some if {
                    err return 
                }
            } else c char.is_alphabetic c '_' == lor if {
                self Scanner.identifier as [err]
                &err Opt.is_some if {
                    err return
                }
            } else {
                "Unexpected character: `" puts c putc "`" putlns
                1 exit  
            }
        }

        Opt.None::<HayError>
    }

    fn Scanner.number(*Scanner: self) -> [Opt<HayError>] {

        while 0 self Scanner.peek char.is_ascii_digit {
            self Scanner.advance drop
        }

        self::start @
        self::current @ self::start @ -
        self::source HString.as_str Str.substr 
        Str.parse_u64 as [maybe_n]

        &maybe_n Opt.is_some if {

            maybe_n Opt.unwrap as [n]

            0 self Scanner.peek 'u' ==
            1 self Scanner.peek '8' == land if {
                self Scanner.advance drop
                self Scanner.advance drop
                
                n u8.try_from_u64 as [maybe_n_u8]
                &maybe_n_u8 Opt.is_some if {
                    maybe_n_u8 Opt.unwrap Literal.U8 TokenKind.Literal self Scanner.add_token
                } else {
                    "Failed to convert to u8" HString.new
                    self::file HString.clone
                    self::line @
                    self::token_start @
                    self::token_end @
                    Loc.new HayError.new Opt.Some return

                }

            } else {
                n Literal.U64 TokenKind.Literal self Scanner.add_token
            }
        } else {
            "Failed to parse number" HString.new
            self::file HString.clone
            self::line @
            self::token_start @
            self::token_end @
            Loc.new HayError.new Opt.Some return
        }
    
        Opt.None::<HayError>
    }

    fn Scanner.string(*Scanner: self) -> [Opt<HayError>] {

        while 0 self Scanner.peek '"' != 
            self Scanner.is_at_end lnot land
        {
            0 self Scanner.peek '\n' == if {
                self Scanner.newline
            }
            self Scanner.advance drop
        }

        self Scanner.is_at_end if {
            "Unterminated String" HString.new
            self::file HString.clone
            self::line @
            self::token_start @
            self::token_end @
            Loc.new HayError.new Opt.Some return
        }

        self Scanner.advance drop
        self::start @ 1 +
        self::current @ 1 - self::start @ 1 + -
        self::source HString.as_str Str.substr HString.new
        Literal.String TokenKind.Literal self Scanner.add_token

        Opt.None::<HayError>

    }

    fn Scanner.char(*Scanner: self) -> [Opt<HayError>] {

        self Scanner.advance as [mut c] 

        c '\\' == if {
            self Scanner.advance as [escape]
            escape 'n' == if {
                '\n' *c !
            } else escape 't' == if {
                '\t' *c !
            } else escape 'r' == if {
                '\r' *c !
            } else escape '0' == if {
                '\0' *c !
            } else escape '\'' == if {
                '\'' *c !
            } else escape '\\' == if {
                '\\' *c !
            } else {
                "Unknown escaped character: `\\" HString.new
                escape HString.push
                '`'    HString.push
                self::file HString.clone
                self::line @
                self::token_start @ 
                self::token_end @
                Loc.new HayError.new Opt.Some return
            }
        }

        '\'' self Scanner.matches lnot if {
            "Unterminated character." HString.new
            self::file HString.clone
            self::line @
            self::token_start @ 
            self::token_end @
            Loc.new HayError.new Opt.Some return
        }

        c Literal.Char TokenKind.Literal self Scanner.add_token
        Opt.None::<HayError>

    }

    fn Scanner.add_token(TokenKind: kind *Scanner: self) {
        kind
        self::source HString.as_str as [mut src_str]{
            self::current @ self::start @ -
            src_str::data self::start @ ptr+
            cast(Str)
            HString.new
        }
        self::file HString.clone
        self::line @
        self::token_start @
        self::token_end @
        Token.new as [tok]

        tok self::tokens Vec.push
    }

    inline fn Scanner.is_at_end(&Scanner: self) -> [bool] {
        self::current @ self::source HString.size >= 
    }

    inline fn Scanner.advance(*Scanner: self) -> [char] {
        self::current   @ self::source HString.at Opt.unwrap
        self::current   @ 1 + self::current !
        self::token_end @ 1 + self::token_end !
    }

    fn Scanner.matches(char: expected *Scanner: self) -> [bool] {
        self Scanner.is_at_end if {
            false return
        }

        0 self Scanner.peek expected != if {
            false
        } else {
            self::current @ 1 + self::current !
            self::token_end @ 1 + self::token_end !
            true
        }
    }

    inline fn Scanner.peek(u64: offset &Scanner: self) -> [char] {
        '\0' self::current @ offset + self::source HString.at Opt.unwrap_or 
    }

    inline fn Scanner.newline(*Scanner: self) {
        self::line @ 1 + self::line !
        1 self::token_start !
        1 self::token_end !
    }

    inline fn Scanner.special_chars() -> [Vec<char>] {

        Vec.new::<char> as [mut vec]
        ' '  *vec Vec.push
        '\n' *vec Vec.push
        '\t' *vec Vec.push
        '\r' *vec Vec.push
        ':'  *vec Vec.push
        '{'  *vec Vec.push
        '}'  *vec Vec.push
        '['  *vec Vec.push
        ']'  *vec Vec.push
        '('  *vec Vec.push
        ')'  *vec Vec.push
        '<'  *vec Vec.push
        '>'  *vec Vec.push
        vec

    }

    fn Scanner.identifier(*Scanner: self) -> [Opt<HayError>] {

        Keyword.keywords as [keywords]
        Scanner.special_chars as [chars]

        0 as [mut count]

        while self Scanner.is_at_end lnot 
            0 self Scanner.peek &chars Vec.contains lnot 
            land
        {
            self Scanner.advance drop
        } 

        self::start @
        self::current @ self::start @ -
        self::source HString.as_str 
        Str.substr as [ident]

        ident &keywords Map.get as [maybe_kind]
        &maybe_kind Opt.is_some if {
            maybe_kind Opt.unwrap as [kind]
            kind::tag @ TokenKindTag::Syscall == if {
                self Scanner.syscall as [result]
                &result Opt.is_some if {
                    result return
                }
            } else {
                kind @ self Scanner.add_token
            }
        } else {
            ident HString.new TokenKind.Ident self Scanner.add_token
        }

        Opt.None::<HayError>

    }

    fn Scanner.syscall(*Scanner: self) -> [Opt<HayError>] {
        '(' self Scanner.matches lnot if {
            "Expected " HString.new
            Marker::LeftParen Marker.format
            " after `syscall`." HString.push_str 
            self::file HString.clone 
            self::line @ 
            self::token_start @ 
            self::token_end @
            Loc.new
            HayError.new
            Opt.Some return
        }

        self Scanner.advance as [c]
        c char.parse_u8 as [maybe_n] {
            &maybe_n Opt.is_some if {
                maybe_n Opt.unwrap as [n]
                n 0u8 > n 7u8 < land if {
                    n cast(u64)
                } else {
                    "Expected `1..6` after `syscall(`, but found " HString.new
                    c HString.push
                    self::file HString.clone 
                    self::line @ 
                    self::token_start @ 
                    self::token_end @
                    Loc.new
                    HayError.new
                    Opt.Some return
                }
            } else {
                "Expected `1..6` after `syscall(`" HString.new
                self::file HString.clone 
                self::line @ 
                self::token_start @ 
                self::token_end @
                Loc.new
                HayError.new
                Opt.Some return
            }
        } as [n]

        ')' self Scanner.matches lnot if {
            "Expected " HString.new
            Marker::RightParen Marker.format
            " after `syscall`." HString.push_str 
            self::file HString.clone 
            self::line @ 
            self::token_start @ 
            self::token_end @
            Loc.new
            HayError.new
            Opt.Some return
        }

        n TokenKind.Syscall self Scanner.add_token
        Opt.None::<HayError>

    }

}