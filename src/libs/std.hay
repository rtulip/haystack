fn sys_write(u64 *u8 u64) -> [u64] {
    1 syscall(3)
}

fn sys_exit(u64) {
    60 syscall(1) drop
}

fn puts(Str) {
    split 1 sys_write drop
}

fn exit(u64) {
    sys_exit 
}

fn putd(u64) {
    var u8[20]: buffer
    buffer @ as [chars]

    19 swap 
    while dup 0 > {
        as [i x]
        x 10 % 48 + cast(u8) i chars Arr.set
        
        i 1 -
        x 10 /
    } drop
    
    as [i]
    19 i - chars::data i 1 + ptr+ cast(Str) puts
}

fn Arr.set<T>(T: value u64: idx Arr<T>: arr) {

    idx arr::size >= if {
        "Index out of bounds: " write
        idx print
        1 exit
    }
    value arr::data idx ptr+ !
}

fn Arr.get<T>(u64: idx Arr<T>: arr) -> [T] {
    idx arr::size >= if {
        "Index out of bounds: " write
        idx print
        1 exit
    }
    arr::data idx ptr+ @
}