include "stack.hay"
include "std.hay"
include "opt.hay"

struct Map<T> {
    *Stack<Str>: keys
    *Stack<T>: values
}

fn Map.init<T>(*Map<T>: map_p) {
    sizeOf(Stack<Str>) malloc::<u8> as [keys_bytes]
    keys_bytes::data cast(u64) cast(*Stack<Str>) as [keys_p]
    sizeOf(Stack<T>) malloc::<u8> as [values_bytes]
    values_bytes::data cast(u64) cast(*Stack<T>) as [values_p] 
    
    keys_p   Stack.init
    values_p Stack.init
    keys_p values_p cast(Map) map_p !
}

fn Map.destroy<T>(*Map<T>: map_p) {
    map_p @ as [map]
    map::keys Stack.destroy
    map::values Stack.destroy
    sizeOf(Stack<Str>) map::keys cast(u64) cast(*u8) cast(Arr) free
    sizeOf(Stack<T>) map::values cast(u64) cast(*u8) cast(Arr) free
}

fn Map.idx_of<T>(Str: key *Map<T>: map_p) -> [Opt<u64>] {

    map_p @ as [map]
    map::keys @ as [keys]
    false 0 while as [result idx] { result idx
        result lnot
        idx keys::len < land
    } {
        as [result idx]
        idx keys::slice Arr.get key Str.equals 
        idx 1 + 
    }

    as [result idx] 

    result if {
        idx 1 - Opt.Some
    } else {
        Opt.None::<u64>
    }

}

fn Map.contains<T>(Str: key Map<T>: map) -> [bool] {
    key map Map.idx_of Opt.is_some
}

fn Map.get_ref<T>(Str: key *Map<T>: map_p) -> [Opt<*T>] {
    map_p @ as [map]
    map::values @ as [values]
    key map_p Map.idx_of as [maybe_idx] 
    maybe_idx Opt.is_some if {
        maybe_idx Opt.unwrap values::arr Arr.get_ref Opt.Some
    } else {
        Opt.None::<*T>
    }
}

fn Map.get<T>(Str: key *Map<T>: map_p) -> [Opt<T>] {
    map_p @ as [map]
    map::values @ as [values]
    key map_p Map.idx_of as [maybe_idx] 
    maybe_idx Opt.is_some if {
        maybe_idx Opt.unwrap values::slice Arr.get Opt.Some
    } else {
        Opt.None::<T>
    }

}

fn Map.insert<T>(Str: key T: value *Map<T>: map_p) -> [Opt<T>] {
    map_p @ as [map]
    map::keys @ map::values @ as [keys values]

    key map_p Map.idx_of as [maybe_idx]
    maybe_idx Opt.is_some if {
        maybe_idx Opt.unwrap as [idx]
        idx values::slice Arr.get Opt.Some
        value idx values::slice Arr.set
    } else {
        key map::keys Stack.push
        value map::values Stack.push
        Opt.None::<T>
    }

}

fn Map.reverse_lookup<T>(*T: value_p *Map<T>: map_p) -> [Str] {
    map_p @ as [map]
    map::keys @ map::values @ as [keys values]
    keys::arr::data                     // Linear map is two stacks
    value_p values::arr::data ptr-diff  // Find the index of the type in the values
    ptr+ @                              // Offset to the same key and read
}