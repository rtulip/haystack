enum struct Foo {
    []            : Unit
    Str           : Value
    [u64 Str bool]: Tuple
}

impl Print<Foo> {
    fn print(Foo) match {
        Foo::Unit { "Foo::Unit" print }
        Foo::Value as [s] { "Foo::Value(" print s print ")" print }
        Foo::Tuple as [t] { 
            "Foo::Tuple[" print 
            t::0 print " " print
            t::1 print " " print
            t::2 print "]" print
        }
    }
}

fn always_foo_value(Str) -> [Foo::Value] {
    cast(Foo::Value)
}

fn always_unit() -> [Foo::Unit] {
    Foo::Unit
}

fn main() {
    Foo::Unit                          println
    "Hello Sum Types" always_foo_value println
    [1 "two" false]   cast(Foo::Tuple) println

}