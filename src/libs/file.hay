include "str.hay"
include "alloc.hay"
include "hstring.hay"

struct File {
    pub u64: fd
}

fn File.exists(Str: file_name) -> [bool] {
    var u64[18]: statbuf_p
    statbuf_p @ as [statbuf]
    0 statbuf memset

    "" HString.new
    file_name HString.push_str
    '\0' HString.push
    as [cstr]
    &cstr HString.as_str as [path]
    statbuf::data path::data sys_stat
    &cstr HString.delete
}

fn File.open(u64: mode u64: flags Str: path) -> [File] {
    "" HString.new
    path HString.push_str
    '\0' HString.push
    as [cstr]
    &cstr HString.as_str as [path_term]

    mode flags path_term::data sys_open as [fd]
    &cstr HString.delete
    fd cast(File)
}

fn File.close(File: file) {
    file::fd sys_close drop
}

fn File.str_from_path(Str: path) -> [Str] {
    0 0 path File.open as [file]
    file File.size as [size]
    size malloc::<char> as [buffer]
    size buffer::data file::fd sys_read drop
    file File.close

    buffer::size buffer::data cast(Str)

}

fn File.size(File: file) -> [u64] {
    var u64[18]: statbuf_p
    statbuf_p @ as [statbuf]
    0 statbuf memset
    statbuf::data file::fd sys_fstat if {
        statbuf::data 6 ptr+ cast(u64) cast(*u64) @ 
    } else {
        "Syscall `fstat` failed " putlns
        1 exit
        0
    }
}
