include "sys_x86_64.hay"
struct cStr {
    u64: size
    *u8: data
}

fn cStr.to_Str(cStr: cs) -> [Str] {
    cs::size 1 - cs::data cast(Str)
}

fn Str.to_cStr(Str: s Arr<u8>: buffer) -> [cStr bool] {
    s::size 1 + buffer::size >= if {
        "Buffer is too small to null terminate string" putlns
        s split cast(cStr) false
    } else {
        // null terminate the string.
        s split buffer::data memcpy
        0 cast(u8) buffer::data s::size ptr+ !
        s::size 1 + buffer::data cast(cStr) true
    }
}

fn fputs(Str: s u64: fd) {
    s split fd sys_write drop
}

// TODO: replace `1` with a constant for stdout
fn puts(Str) {
    1 fputs
}

fn putlns(Str) {
    puts "\n" puts
}

fn exit(u64) {
    sys_exit 
}

fn fputu(u64: u u64: fd) {
    var u8[20]: buffer
    buffer @ as [chars]

    0 u == if {
        "0" fd fputs
    }


    19 u while dup 0 != {
        as [i x]
        x 10 % 48 + cast(u8) chars::data i ptr+ !
        
        i 1 -
        x 10 /
    } drop
    
    as [i]
    19 i - chars::data i 1 + ptr+ cast(Str) fd fputs
}

fn putu(u64) {
    1 fputu
}

fn putlnu(u64) {
    putu "\n" puts
}

fn fputb(bool: b u64: fd) {
    b if { "true" fd fputs } else { "false" fd fputs }
}

fn putb(bool) {1 fputb}

fn putlnb(bool) {
    putb "\n" puts
}

fn Str.drop_front(Str: s) -> [Str] {
    s::size 0 == if {
        s
    } else {
        s::size 1 - s::data 1 ptr+ cast(Str)
    }
    
}
fn Str.size(Str: s) -> [u64] {
    s::size
}

fn Str.substr(Str: s u64: start u64: len) -> [Str] {
    len s::data start ptr+ cast(Str)
}

fn Str.equals(Str: s1 Str:s2) -> [bool] {

    var bool: equal

    s1 split cast(Arr)
    s2 split cast(Arr)
    as [arr1 arr2]

    arr1::size arr2::size == if {
        true equal !

        0 while dup arr1::size < equal @ land {
            as [i]

            i arr1 Arr.get cast(u64)
            i arr2 Arr.get cast(u64) != if {
                false equal !
            }

            i 1 + 
        } drop

        equal @

    } else {
        false
    }

}