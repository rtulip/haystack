include "std.hay"
include "hstring.hay"
include "selfhost/src/lex/loc.hay"

enum ErrorKind {
    Error
}

fn ErrorKind.format(HString &ErrorKind) -> [HString] {
    as [self]
    self @ ErrorKind::Error == if {
        "Error" HString.push_str
    } else {
        "ErrorKind.fput unreachable!" putlns
        1 exit
    }
}

struct Hint {
    pub HString: note
    pub HString: hint
}

struct HayError {
    HString: message
    ErrorKind: kind
    Loc: loc
    Vec<Hint>: hints
impl:

    fn HayError.new(HString: message Loc: loc) -> [HayError] {
        message
        ErrorKind::Error
        loc
        Vec.new::<Hint>
        cast(HayError)
    }

    fn HayError.delete(*HayError: self) {
        self::message HString.delete
        self::loc Loc.delete
        while self::hints Vec.is_empty lnot {
            self::hints Vec.pop Opt.unwrap as [hint]
            &hint::note HString.delete
            &hint::hint HString.delete
        }

        self::hints Vec.delete
    }

    fn HayError.new_type_err(HString: message Loc: loc) -> [HayError] {
        "Type Error: " HString.new 
        &message HString.as_str HString.push_str
        
        ErrorKind::Error
        loc
        Vec.new::<Hint>
        cast(HayError)
    }

    fn HayError.with_hint(HString: hint HayError: mut self) -> [HayError] {
        "Note" HString.new
        hint
        cast(Hint) *self::hints Vec.push
        self
    }

    fn HayError.with_hint_and_custom_note(
        HString: hint 
        HString: note 
        HayError: mut self
    ) -> [HayError] {
        note hint cast(Hint) *self::hints Vec.push
        self
    }

    fn HayError.format(HString &HayError) -> [HString] {
        as [self]
        '[' HString.push
        self::loc Loc.format
        "] " HString.push_str
        self::kind ErrorKind.format
        ": " HString.push_str
        self::message HString.as_str HString.push_str
        '\n' HString.push

        0 while dup self::hints Vec.len < {
            as [i]
            i self::hints Vec.get Opt.unwrap as [hint]
            "    [" HString.push_str
            hint::note HString.as_str HString.push_str
            "]: " HString.push_str
            hint::hint HString.as_str HString.push_str
            '\n' HString.push
            i 1 +
        } drop   
    }

    fn HayError.report(HayError: mut self) {
        "SelfHost:\n" HString.new
        &self HayError.format as [s]
        &s HString.as_str puts
        &s HString.delete
        *self HayError.delete
    }

    //fn HayError.fput(&HayError: self u64: fd) {
    //    "[" fd fputs
    //    self::loc fd Loc.fput
    //    "] " fd fputs
    //    self::kind @ fd ErrorKind.fput
    //    ": " fd fputs
    //    self::message HString.as_str fd fputs
    //
    //    0 while dup self::hints Vec.len < {
    //        as [i]
    //        i self::hints Vec.get Opt.unwrap as [hint]
    //        
    //        "    ["                   fd fputs
    //        hint::note HString.as_str fd fputs
    //        "]: "                     fd fputs
    //        hint::hint HString.as_str fd fputs
    //        i 1 +
    //    } drop 
    //}

    //inline fn HayError.report(&HayError) {
    //    2 HayError.fput
    //}

}