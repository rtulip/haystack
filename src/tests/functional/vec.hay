include "std/vec.hay"
fn main() {

    Vec.new::<u64> as [mut vec]
    "Initial capacity: " print &vec Vec.capacity println
    
    0 while dup 4069 < {
        as [i]
        i *vec Vec.push
        i 1 +
    } drop
    "Heap after pushing: " println
    Heap.debug_summary

    "Element 1234: " print 1234 &vec Vec.get     Option.unwrap @ println
    "Element 2345: " print 2345 *vec Vec.get_mut Option.unwrap @ println
    "Element 4068: " print 4068 &vec Vec.at      Option.unwrap   println

    4069 &vec Vec.get     as [x] &x Option.is_none assert
    4069 *vec Vec.get_mut as [x] &x Option.is_none assert
    4069 &vec Vec.at      as [x] &x Option.is_none assert

    0 while &vec Vec.len 0 > {
        *vec Vec.pop Option.unwrap drop
        1 +
    }

    "Popped: " print print " elements" println

    &vec Vec.delete
    "Heap after freeing: " println
    Heap.debug_summary

}