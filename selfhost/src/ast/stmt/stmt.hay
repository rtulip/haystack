include "result.hay"
include "vec.hay"
include "hstring.hay"
include "linear_map.hay"
include "selfhost/src/error.hay"
include "selfhost/src/utils/sets.hay" 
include "selfhost/src/ast/stmt/enum.hay"
include "selfhost/src/ast/stmt/function.hay"
include "selfhost/src/ast/stmt/parser.hay"
include "selfhost/src/ast/stmt/pre_declaration.hay"
include "selfhost/src/ast/stmt/record.hay"
include "selfhost/src/ast/stmt/var.hay"
include "selfhost/src/lex/scanner.hay"

enum StmtTag {
    Function
    PreDeclaration
    Record
    Enum
    Var
}

union StmtKind {
    FunctionStmt: Function
    PreDeclarationStmt: PreDeclaration
    RecordStmt: Record
    EnumStmt: Enum
    VarStmt: Var
}

struct Stmt {
    StmtKind: kind
    StmtTag: tag

impl:

    fn Stmt.PreDeclaration(PreDeclarationStmt) -> [Stmt] {
        cast(StmtKind)
        StmtTag::PreDeclaration
        cast(Stmt)
    }

    fn Stmt.Record(RecordStmt) -> [Stmt] {
        cast(StmtKind)
        StmtTag::Record
        cast(Stmt)
    }

    fn Stmt.Function(FunctionStmt) -> [Stmt] {
        cast(StmtKind)
        StmtTag::Function
        cast(Stmt)
    }

    fn Stmt.Enum(EnumStmt) -> [Stmt] {
        cast(StmtKind)
        StmtTag::Enum
        cast(Stmt)
    }

    fn Stmt.Var(VarStmt) -> [Stmt] {
        cast(StmtKind)
        StmtTag::Var
        cast(Stmt)
    }

    fn Stmt.from_file(*Set: visited &HString: path) -> [Result<Vec<Stmt> HayError>] {
        path visited Set.contains if {
            Vec.new::<Stmt> Result.Ok::<Vec<Stmt> HayError> return 
        }

        "Starting to parsing statements from: " puts
        path HString.as_str putlns

        path HString.as_str HString.from_file as [source]
        path HString.clone visited Set.insert drop

        path HString.clone source 
        Scanner.new
        Scanner.scan_tokens as [result] {
            &result Result.is_err if {
                result Result.unwrap_err Result.Err::<Vec<Stmt> HayError> return 
            } else {
                result Result.unwrap
            }
        }

        visited Parser.new Parser.parse

        "Finished parsing statements from: " puts
        path HString.as_str putlns

    }

    fn Stmt.from_file_with_prelude(&HString: input_path) -> [Result<Vec<Stmt> HayError>] {
        Set.new
        "src/libs/prelude.hay" HString.new
        as [mut visited prelude_path]
        
        *visited &prelude_path Stmt.from_file as [result] {
            &result Result.is_err if {
                result Result.unwrap_err Result.Err::<Vec<Stmt> HayError> return
            } else {
                result Result.unwrap
            }
        } as [mut stmts]

        "Finished with prelude. Next: " puts
        input_path HString.as_str putlns
        

        *visited input_path Stmt.from_file as [result] {
            &result Result.is_err if {
                result Result.unwrap_err Result.Err::<Vec<Stmt> HayError> return
            } else {
                result Result.unwrap as [mut input_stmts]
                *input_stmts *stmts Vec.append
                &input_stmts Vec.delete
            }
        }

        stmts Result.Ok::<Vec<Stmt> HayError>

    }

}

