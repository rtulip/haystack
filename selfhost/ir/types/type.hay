
// Predeclare a type name
// Must ensure that Type is defined later.
struct Type

struct EnumType {
    Str: name
    Arr<Str>: Variants
}

struct PointerType {
    *Type: inner
}

struct StructType {
    Str: name
    Arr<*Type>: members
    Arr<Str>:   idents
}

struct GenericStructBaseType {
    StructType: base
    Arr<*Type>: generics 
}

struct GenericStructInstanceType {
    *GenericStructBaseType: base
    StructType: instance
    Arr<*Type>: alias_list
}

struct ResolvedStructType {
    *StructType: base
    StructType: instance
}

struct UnionType {
    Str: name
    Arr<*Type>: members
    Arr<Str>: idents
}

struct GenericUnionBaseType {
    UnionType: base
    Arr<*Type>: generics
}

struct GenericUnionInstanceType {
    *GenericUnionBaseType: base
    UnionType: instance 
    Arr<*Type>: alias_list
}

struct ResolvedUnionType {
    *UnionType: base
    UnionType: instance 
}

enum TypeKind {
    U64
    U8
    Bool
    Enum
    Placeholder
    Pointer
    Struct
    GenericStructBase
    GenericStructInstance
    ResolvedStruct
    Union
    GenericUnionBase
    GenericUnionInstance
    ResolvedUnion
}

union TypeValue {
    u64:                       U64
    u8:                        U8
    bool:                      Bool
    EnumType:                  Enum
    Str:                       Placeholder
    PointerType:               Pointer
    StructType:                Struct
    GenericStructBaseType:     GenericStructBase
    GenericStructInstanceType: GenericStructInstanceType
    ResolvedStructType:        ResolvedStruct
    UnionType:                 Union
    GenericUnionBaseType:      GenericUnionBase
    GenericUnionInstanceType:  GenericUnionInstance
    ResolvedUnionType:         ResolvedUnion
}

struct Type {
    TypeValue: type
    TypeKind: tag
}

fn Type.from_u64(u64) -> [Type] {
    cast(TypeValue) TypeKind::U64 cast(Type)  
}

fn Type.from_u8(u8) -> [Type] {
    cast(TypeValue) TypeKind::U8 cast(Type)
}

fn Type.from_bool(bool) -> [Type] {
    cast(TypeValue) TypeKind::Bool cast(Type)
}

fn Type.from_enum(EnumType) -> [Type] {
    cast(TypeValue) TypeKind::Enum cast(Type)
}

fn Type.from_placeholder(Str) -> [Type] {
    cast(TypeValue) TypeKind::Placeholder cast(Type)
}

fn Type.from_pointer(PointerType) -> [Type] {
    cast(TypeValue) TypeKind::Pointer cast(Type)
}

fn Type.from_struct(StructType) -> [Type] {
    cast(TypeValue) TypeKind::Struct cast(Type)
}

fn Type.from_generic_stuct_base(GenericStructInstanceType) -> [Type] {
    cast(TypeValue) TypeKind::GenericStructBase cast(Type)
}

fn Type.from_generic_struct_instance(GenericStructInstanceType) -> [Type] {
    cast(TypeValue) TypeKind::GenericStructInstance cast(Type)
}

fn Type.from_resolved_struct(ResolvedStructType) -> [Type] {
    cast(TypeValue) TypeKind::ResolvedStruct cast(Type)
}

fn Type.from_union(UnionType) -> [Type] {
    cast(TypeValue) TypeKind::Union cast(Type)
}

fn Type.from_generic_union_base(GenericUnionBaseType) -> [Type] {
    cast(TypeValue) TypeKind::GenericUnionBase cast(Type)
}

fn Type.from_generic_union_instance(GenericUnionInstanceType) -> [Type] {
    cast(TypeValue) TypeKind::GenericUnionInstance cast(Type)
}

fn Type.from_resolved_union(ResolvedUnionType) -> [Type] {
    cast(TypeValue) TypeKind::ResolvedUnion cast(Type)
}

fn main() {

}