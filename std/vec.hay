include "std/assert.hay"
struct Vec<T> {
    Arr<T>: slice
    u64: len
impl:

    inline fn Vec.from_parts<T>(Arr<T> u64) -> [Vec<T>] {
        cast(Vec)
    }

    inline fn Vec.new<T>() -> [Vec<T>] {
        8 malloc::<T> 0 cast(Vec) 
    }

    inline fn Vec.with_capacity<T>(u64) -> [Vec<T>] {
        malloc::<T> 0 cast(Vec)
    }

    inline fn Vec.delete<T>(&Vec<T>: self) {
        self::slice @ free
    }

    inline fn Vec.is_empty<T>(&Vec<T>: self) -> [bool] {
        self::len @ 0 ==
    }

    inline fn Vec.slice_mut<T>(*Vec<T>: self) -> [Arr<T>] {
        self::slice @
    }

    inline fn Vec.slice<T>(&Vec<T>: self) -> [ConstArr<T>] {
        self::slice::size @
        self::slice::data @
        cast(ConstArr)
    }

    // Add an element to the end of the vector.
    //
    // Parameters:
    // - `value`: the value to add to the vector
    // - `self`: a mutable reference to the vector to add the value to
    //
    // Return value:
    // - This function returns `()` and does not allocate a new vector.
    fn Vec.push<T>(T: value *Vec<T>: self) {
        self::len @ 0 == if {
            2 self::slice @ realloc self::slice ! 
        } else self::len @ self::slice::size @ == if {
            self::slice::size @ 2 * self::slice @ realloc self::slice !
        }
        value self::len @ self::slice @ Arr.set
        self::len @ 1 + self::len !
    }

    // Pop the last element off the vector and return it inside of an `Option`, or return `Option.None` if the vector is empty.
    //
    // Parameters:
    // - `self`: the vector to pop from
    //
    // Return value:
    // - An `Option` containing the popped element, or `Option.None` if the vector is empty.
    fn Vec.pop<T>(*Vec<T>: self) -> [Option<T>] {
        self::len @ 0 == if {
            Option.None::<T>
        } else {
            self::len @ 1 - self::len !
            self::len @ self::slice @ Arr.get Option.Some
        }
    }

    // Get a reference to the element at the given index in the vector, or return `Option.None` if the index is out of bounds.
    //
    // Parameters:
    // - `idx`: the index of the element to get
    // - `self`: the vector to get the element from
    //
    // Return value:
    // - An `Option` containing a reference to the requested element, or `Option.None` if the index is out of bounds.
    fn Vec.get<T>(u64: idx &Vec<T>: self) -> [Option<&T>] {
        idx self::len @ >= if {
            Option.None::<&T>
        } else {
            idx self::slice @ Arr.get_ref Option.Some
        }
    }

    // Get a mutable reference to the element at the given index in the vector, or return `Option.None` if the index is out of bounds.
    //
    // Parameters:
    // - `idx`: the index of the element to get
    // - `self`: a mutable reference to the vector to get the element from
    //
    // Return value:
    // - An `Option` containing a mutable pointer to the requested element, or `Option.None` if the index is out of bounds.
    fn Vec.get_mut<T>(u64: idx *Vec<T>: self) -> [Option<*T>] {
        idx self::len @ >= if {
            Option.None::<*T>
        } else {
            idx self::slice @ Arr.get_ref_mut Option.Some
        }
    }

    // Return an `Option` containing a reference to the element at the specified index in the vector, or `Option.None` if the index is out of bounds.
    //
    // Parameters:
    // - `idx`: the index of the element to retrieve
    // - `self`: a reference to the vector to retrieve the element from
    //
    // Return value:
    // - An `Option` containing a reference to the requested element, or `Option.None` if the index is out of bounds.
    fn Vec.at<T>(u64: idx &Vec<T>: self) -> [Option<T>] {
        idx self::len @ >= if {
            Option.None::<T>
        } else {
            idx self::slice @ Arr.get Option.Some
        }
    }

    // Return an `Option` containing a reference to the last element in the vector, or `Option.None` if the vector is empty.
    //
    // Parameters:
    // - `self`: a reference to the vector to retrieve the last element from
    //
    // Return value:
    // - An `Option` containing a reference to the last element in the vector, or `Option.None` if the vector is empty.
    inline fn Vec.last<T>(&Vec<T>: self) -> [Option<&T>] {
        self::len @ 1- self Vec.get
    }

    // Return the number of elements that the vector can hold without reallocating its underlying storage.
    //
    // Parameters:
    // - `self`: a reference to the vector to retrieve the capacity of
    //
    // Return value:
    // - The number of elements that the vector can hold without reallocating its underlying storage.
    fn Vec.capacity<T>(&Vec<T>: self) -> [u64] {
        self::slice::size @
    }

    // Return the number of elements in the vector.
    //
    // Parameters:
    // - `self`: a reference to the vector to retrieve the length of
    //
    // Return value:
    // - The number of elements in the vector.
    fn Vec.len<T>(&Vec<T>: self) -> [u64] {
        self::len @
    }

    // Check if the vector contains a given element.
    //
    // Parameters:
    // - `item`: the element to search for
    // - `self`: a reference to the vector to search in
    //
    // Return value:
    // - `true` if the vector contains the given element, `false` otherwise.
    fn Vec.contains<T>(T: item &Vec<T>: self) -> [bool] {

        0 while dup self Vec.len < do {
            as [i]
            i self Vec.at Option.unwrap item == if {
                true return
            }
            i 1 +
        } drop

        false

    }

    // Append the elements of another vector to this vector.
    //
    // Parameters:
    // - `other`: a mutable reference to the vector whose elements to append to `self`.
    // - `self`: a mutable reference to the vector to append the elements to.
    //
    // Return value:
    // - This function returns `()` and does not allocate a new vector.
    fn Vec.append<T>(*Vec<T>: other *Vec<T>: self) {
        Vec.new::<T> as [mut temp]

        while other Vec.is_empty lnot do {
            other Vec.pop Option.unwrap *temp Vec.push
        }

        while &temp Vec.is_empty lnot do {
            *temp Vec.pop Option.unwrap self Vec.push
        }

        &temp Vec.delete

    }
    
    // Reverse the elements of the vector in place.
    //
    // Parameters:
    // - `self`: a mutable reference to the vector to reverse.
    //
    // Return value:
    // - This function returns a new vector with the reversed elements.
    fn Vec.reverse<T>(Vec<T>: mut self) -> [Vec<T>] {

        Vec.new::<T> as [mut rev]
        while &self Vec.is_empty lnot do {
            *self Vec.pop Option.unwrap *rev Vec.push
        }

        &self Vec.delete
        rev

    }
}

impl<T> Format<&Vec<T>>
requires: [Format<T>] {

    fn fmt(String &Vec<T>) -> [String] {
        as [self]
        self Vec.len 0 == if { "[ ]" fmt return }
        
        '[' fmt
        0 while dup self Vec.len 1 - < do {
            as [i]
            i self Vec.get Option.unwrap @ fmt
            ' '              fmt
            i 1 +
        } drop

        self Vec.last Option.unwrap @ fmt 
        ']' fmt
    }

}

impl<T> Format<Vec<T>>
requires: [Format<T>] {
    fn fmt(String Vec<T>) -> [String] {
        as [self]
        &self fmt
        &self Vec.delete
    }
}