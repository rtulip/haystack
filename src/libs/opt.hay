include "str.hay"
enum OptTag {
    Some
    None
}

union OptVal<T> {
    T: Some
    u64: None
}

struct Opt<T> {
    OptVal<T>: value
    OptTag: tag
}

fn Opt.Some<T>(T) -> [Opt<T>] {
    cast(OptVal<T>)
    OptTag::Some
    cast(Opt)
}

fn Opt.None<T>() -> [Opt<T>] {
    0 cast(OptVal<T>)
    OptTag::None
    cast(Opt)
}

fn Opt.is_some<T>(Opt<T>: opt) -> [bool] {
    opt::tag OptTag::Some ==
}

fn Opt.is_none<T>(Opt<T>: opt) -> [bool] {
    opt::tag OptTag::None ==
}

fn Opt.unwrap<T>(Opt<T>: opt) -> [T] {

    opt Opt.is_none if {
        "Unwrapped a None variant" putlns
        1 exit 
    }

    opt::value::Some

}

fn foo<T>(T: dropped) -> [Opt<T>] {
    Opt.None::<T>
}

fn main() {

    "Hello World" Opt.Some as [someStr]

    someStr Opt.is_some putlnb
    someStr Opt.is_none putlnb
    someStr Opt.unwrap putlns 

    Opt.None::<Str> as [noneStr] 
    noneStr Opt.is_some putlnb
    noneStr Opt.is_some putlnb

    noneStr Opt.unwrap putlns

    true foo as [noneBool]


}