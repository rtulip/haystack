include "std.hay"
include "file.hay"
include "stack.hay"

include "selfhost/ir/tokens/token.hay"

fn parse_comment(*Loc: loc Str: s) -> [Str] {

    s while as [str] { str
        "\n" str Str.starts_with lnot 
        str::size 0 >            land 
    }
    {
        as [str] 
        str::size 1 - 
        str::data 1 ptr+
        cast(Str)

        1 loc loc_bump
    }

}

fn Str.is_numeric(Str: s) -> [bool] {
    true 0 while dup s::size < {
        as [cond i]
        s::data i ptr+ @ cast(u64) as [char]
        48 char <= char 57 <= land
        cond land
        i 1 +  
    } drop
}

fn Str.to_u64(Str: s) -> [u64] {

    s Str.is_numeric lnot if {
        "Cannot convert non numeric string `" puts
        s puts
        "` to a u64" putlns
        1 exit
    }

    s::size s::data cast(Arr) as [arr]

    0 0 while dup s::size < {
        as [result idx]
        result 10 * 
        idx arr Arr.get cast(u64) 48 - +
        idx 1 +
    } drop

}

fn parse_word(*Loc: loc Str: s *Stack<Token>: tokens) -> [Str] {
    0 s::data cast(Str)
    s while as [str] { str                       // Break on:
        " "  str Str.starts_with lnot            //  * space
        "\n" str Str.starts_with lnot       land //  * newline
        str Marker.try_from_str Opt.is_none land //  * marker
        "<" str Str.starts_with lnot        land //  * less than
        ">" str Str.starts_with lnot        land //  * greater than
        str::data @ cast(u64) 34 !=         land //  * quote
        str::size 0 >                       land //  * empty string
    }
    {
        as [word str]
        word::size 1 + word::data       cast(Str)
        str::size  1 - str::data 1 ptr+ cast(Str)
    }
    as [word str]
    word Str.is_numeric if {
        word Str.to_u64 Literal.from_u64 TokenKind.from_literal loc @ cast(Token)
    } else word Keyword.try_from_str Opt.is_some if {
        word Keyword.try_from_str Opt.unwrap 
        TokenKind.from_keyword loc @ cast(Token)
    } else word Operator.try_from_str Opt.is_some if {
        word Operator.try_from_str Opt.unwrap
        TokenKind.from_operator loc @ cast(Token)
    } else {
        word TokenKind.from_word loc @ cast(Token)
    }

    tokens Stack.push
    word::size loc loc_bump
    str

}

fn parse_string_literal(*Loc: loc Str: s *Stack<Token>: tokens) -> [Str] {
    
    s::data @ cast(u64) 34 != if {
        "Parsing string failed. Expected double quote, but found: `" puts 
        0 1 s Str.substr puts
        "` instead." putlns
        1 exit
    }

    1 s::data cast(Str)
    s::size 1 - s::data 1 ptr+ cast(Str)
    while as [str] { str
        str::data @ cast(u64) 34 !=
        str::size 0 >               land
    }
    {
        as [word str]
        0 1 str Str.substr as [char]
        word::size 1 + word::data       cast(Str)
        str::size  1 - str::data 1 ptr+ cast(Str)
    }

    as [word str] {
        str::data @ cast(u64) 34 != if {
            "Didn't find end of string" putlns
            1 exit
        }
        word::size 1 + word::data       cast(Str)
        str::size  1 - str::data 1 ptr+ cast(Str)
    }
    
    as [word str]
    word Literal.from_str TokenKind.from_literal loc @ cast(Token)
    tokens Stack.push

    0 while dup word::size < {
        as [i]
        i 1 word Str.substr "\n" Str.equals if {
            loc loc_newline
        } else {
            1 loc loc_bump
        }
        i 1 +
    } drop

    str

}

fn loc_bump(u64: n *Loc: loc_p) {
    loc_p @ as [loc]
    loc::file loc::row loc::col n + cast(Loc)
    loc_p !
}

fn loc_newline(*Loc: loc_p) {
    loc_p @ as [loc]
    loc::file loc::row 1 + 1 cast(Loc)
    loc_p !
}

fn parse_next(*Loc: loc Str: str *Stack<Token>: tokens) -> [Str] {
    str::size 0 == if {
        "No token to be found..." putlns
        str
    } else {
        " " str Str.starts_with if {
            1 loc loc_bump
            1 str::size 1 - str Str.substr
        } else "\n" str Str.starts_with if {
            loc loc_newline
            1 str::size 1 - str Str.substr
        } else "//" str Str.starts_with if {
            loc str parse_comment
        } else str Marker.try_from_str Opt.is_some if {
            str Marker.try_from_str Opt.unwrap as [marker]
            marker TokenKind.from_marker loc @ cast(Token) tokens Stack.push
            marker Marker.to_str as [marker_str] 
            marker_str::size loc loc_bump
            marker_str::size str::size marker_str::size - str Str.substr
        } else str Operator.try_from_str Opt.is_some if {
            str Operator.try_from_str Opt.unwrap as [oper]
            oper TokenKind.from_operator loc @ cast(Token) tokens Stack.push
            oper Operator.to_str as [oper_str]
            oper_str::size loc loc_bump
            oper_str::size str::size oper_str::size - str Str.substr 
        } else str::data @ cast(u64) 34 == if {
            loc str tokens parse_string_literal
        } else {
            loc str tokens parse_word
        }
    }
    
}

fn parse_tokens(Str: path Str: file_str *Stack<Token>: tokens) {
    var Loc: loc
    
    path 1 1 cast(Loc) loc !

    file_str while as [str] { str
        str::size 0 >
    }
    {
        as [str]
        loc str tokens parse_next
    } drop

    TokenKind.from_eof loc @ cast(Token) tokens Stack.push

}