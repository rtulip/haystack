include "std.hay"
struct Point {
	pub u64: x
	pub u64: y
}

interface MyAdd<A B> {
	_: Output
	fn my_add(A B) -> [Output]
}

impl MyAdd<u64 u64> {
	u64: Output
	inline fn my_add(u64 u64) -> [u64] { + }
}

impl MyAdd<u64 u8> {
	u64: Output
	inline fn my_add(u64 u8) -> [u64] { cast(u64) my_add }
}

impl MyAdd<u8 u64> {
	u64: Output
	inline fn my_add(u8 u64) -> [u64] { swap cast(u64) my_add }
}

impl MyAdd<u8 u8> {
	u8: Output
	inline fn my_add(u8 u8) -> [u8] { + }
}

impl MyAdd<Point Point> {
	Point: Output
	fn my_add(Point: a Point: b) -> [Point] {
		a::x b::x my_add
		a::y b::y my_add
		cast(Point)
	}
}

interface Foo<A B> {
	_: Output
	fn foo(A B) -> [A B]
	fn bar(A B) -> [A B] { foo }
}

impl Foo<u64 u64> {
	u8: Output
	fn foo(u64 u64) -> [u64 u64] { }
}

impl Foo<u8 u8> {
	u8: Output
	fn foo(u8 u8) -> [u8 u8] {}
	fn bar(u8 u8) -> [u8 u8] { swap } 
}

fn main() {

	1 2     my_add putlnu
	1u8 2u8 my_add putlnu8
	1u8 2   my_add putlnu
	1   2u8 my_add putlnu

	1 2 cast(Point)
	4 1 cast(Point)
	my_add as [p] {
		"Point(" puts p::x putu ", " puts p::y putu ")" putlns
	}

	12345 54321 bar putlnu putlnu
	111u8 222u8 bar putlnu8 putlnu8

}