include "std.hay"
include "opt.hay"
struct Stack<T> {
    u64: size
    Arr<T>: arr
}

fn Stack.arr<T>(Stack<T>: stk_p) -> [*Arr<T>] {
    stk_p @ as [stk]
    stk::arr
}

fn Stack.init<T>(Arr<T>: arr *Stack<T>: stk_p) {
    0 arr cast(Stack) stk_p !
}

fn Stack.push<T>(T: value *Stack<T>: stk_p) -> [Opt<T>] {
    stk_p @ as [stk]
    stk::size stk::arr::size >= if {
        value Opt.Some
    } else {
        value stk::size stk::arr Arr.set
        stk::size 1 + stk::arr cast(Stack) stk_p !
        Opt.None::<T>
    }
}

fn Stack.pop<T>(*Stack<T>: stk_p) -> [Opt<T>] {
    stk_p @ as [stk]
    stk::size 0 == if {
        Opt.None::<T>
    } else {
        stk::size 1 - stk::arr cast(Stack) stk_p !
        stk::size 1 - stk::arr Arr.get Opt.Some
    }
}

fn Stack.peek<T>(*Stack<T>: stk_p) -> [Opt<T>] {
    stk_p @ as [stk]
    stk::size 0 == if {
        Opt.None::<T>
    } else {
        stk::size 1 - stk::arr Arr.get Opt.Some
    }
}