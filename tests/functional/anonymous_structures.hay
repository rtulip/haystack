enum struct Foo {
    u64            : Value
    [u64 u64]      : Tuple
    {u64: x u64: y}: NamedTuple
}

impl Print<Foo> {
    fn print(Foo) match {
        Foo::Value as [value] { 
            "Foo::Value(" print value print ")" print
        }
        Foo::Tuple as [tuple] { 
            "Foo::Tuple" print 
            "[" print tuple::0 print
            " " print tuple::1 print
            "]" print
        }
        Foo::NamedTuple as [named] { 
            "Foo::Named {" print 
            " x: " print named::x print
            " y: " print named::y print
            " }"   print
        }
    }
}

fn square_x({u64: x u64: y}: point) -> [[u64 u64]] {
    [point::x point::x * point::y]
}

fn main() {
    12345         cast(Foo::Value)      println 
    [12345 54321] cast(Foo::Tuple)      println
    [12345 54321] cast(Foo::NamedTuple) println

    "a" "b" cast({Str: a Str: b}) as [x]
    x::a println
    x::b println

    x as [[a b]]
    a println
    b println

    x unpack println println 

    x println

    [3 4] square_x println

}