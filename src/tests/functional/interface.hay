struct Point {
	pub u64: x
	pub u64: y
}

impl Add<Point Point> {
	Point: Output
	fn Op.add(Point: a Point: b) -> [Point] {
		a::x b::x +
		a::y b::y +
		cast(Point)
	}
}

interface Foo<A B> {
	_: Output
	fn foo(A B) -> [A B]
	fn bar(A B) -> [A B] { foo }
}

impl Foo<u64 u64> {
	u8: Output
	fn foo(u64 u64) -> [u64 u64] { }
}

impl Foo<u8 u8> {
	u8: Output
	fn foo(u8 u8) -> [u8 u8] {}
	fn bar(u8 u8) -> [u8 u8] { swap } 
}

fn main() {

	1 2     + println
	1u8 2u8 + println
	1u8 2   + println
	1   2u8 + println

	1 2 cast(Point)
	4 1 cast(Point)
	+ as [p] {
		"Point(" print p::x print ", " print p::y print ")" println
	}

	12345 54321 bar println println
	111u8 222u8 bar println println

}