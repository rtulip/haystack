include "std.hay"
enum Keyword {
    Function
    Var
    As
    If
    Else
    While
    Struct
    Union
    Enum
    Cast
    Split
    Syscall
    Include
    SizeOf
}

fn Keyword.fputs(Keyword: kw u64: fd) {

    "Keyword::" fd fputs
    kw Keyword::Function == if {
        "Function" fd fputs
    } else kw Keyword::Var == if {
        "Var" fd fputs
    } else kw Keyword::As == if {
        "As" fd fputs
    } else kw Keyword::If == if {
        "If" fd fputs
    } else kw Keyword::Else == if {
        "Else" fd fputs
    } else kw Keyword::While == if {
        "While" fd fputs
    } else kw Keyword::Struct == if {
        "Struct" fd fputs
    } else kw Keyword::Union == if {
        "Union" fd fputs
    } else kw Keyword::Enum == if {
        "Enum" fd fputs
    } else kw Keyword::Cast == if {
        "Cast" fd fputs
    } else kw Keyword::Split == if {
        "Split" fd fputs
    } else kw Keyword::Syscall == if {
        "Syscall" fd fputs
    } else kw Keyword::Include == if {
        "Include" fd fputs
    } else kw Keyword::SizeOf == if {
        "SizeOf" fd fputs
    } else {
        "Unrecognized Keyword" putlns
        1 exit
    }
}

fn Keyword.puts(Keyword) {
    1 Keyword.fputs
}

fn Keyword.try_from_str(Str: maybe_keyword) -> [Opt<Keyword>] {

    "fn" maybe_keyword Str.equals if {
        Keyword::Function Opt.Some
    } else "var" maybe_keyword Str.equals if {
        Keyword::Var Opt.Some
    } else "as" maybe_keyword Str.equals if {
        Keyword::As Opt.Some
    } else "if" maybe_keyword Str.equals if {
        Keyword::If Opt.Some
    } else "else" maybe_keyword Str.equals if {
        Keyword::Else Opt.Some
    } else "while" maybe_keyword Str.equals if {
        Keyword::While Opt.Some
    } else "struct" maybe_keyword Str.equals if {
        Keyword::Struct Opt.Some
    } else "union" maybe_keyword Str.equals if {
        Keyword::Union Opt.Some
    } else "enum" maybe_keyword Str.equals if {
        Keyword::Enum Opt.Some
    } else "split" maybe_keyword Str.equals if {
        Keyword::Split Opt.Some
    } else "syscall" maybe_keyword Str.equals if {
        Keyword::Syscall Opt.Some
    } else "include" maybe_keyword Str.equals if {
        Keyword::Include Opt.Some
    } else "sizeOf" maybe_keyword Str.equals if {
        Keyword::SizeOf Opt.Some 
    } else {
        Opt.None::<Keyword>
    }
}